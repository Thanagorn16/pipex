#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <time.h>
#include <string.h>

// int	main(void) // this function is to show how fork works
// {
// 	int	id;
	
// 	id = fork();
// 	if (id != 0)
// 		fork();
// 	printf("hello %d\n", id);

// }

/*
* HOW TO USE WAIT()
*/
// int	main(void)
// {
// 	int	id = fork();
// 	int n;

// 	if (id == 0)
// 		n = 1;
// 	else
// 		n = 6;

// *	we need wait() so that the process (parent & child) won't run at the same time and give a messy result
// 	if (id != 0) // * in this case, we want the main process to wait unilt the child process is done
// 		wait(NULL);

// 	for (int i = n; i < n + 5; i++)
// 		printf("%d", i);

// 	if (id == 0)
// 		printf("\n");
// }

/*
* Process ID
	every process has its own id, so if we working on several process this
	will be helpful for identifying which process is being executed
	* This requires #include <sys/wait.h>
*/
// int	main(void)
// {
// 	int	id = fork();

// 	if (id == 0)
// 		sleep(1);
// 	printf("current id: %d, parent id: %d\n", getpid(), getppid());

// 	int res = wait(NULL); 
// 	if (res == -1) //* -1 = no child process. Thus, this will be printed if it's the main process
// 		printf("no children to wait for\n");
// 	else
// 		printf("%d finished execution\n", res);
// }

/*
* Communication btw the processes using pipe
  This is one way communication
*/
// int	main(void)
// {
// 	int	fd[2];
// 	int	x;
// 	int	y;

// 	if (pipe(fd) == -1) //* start communication with pipe
// 	{
// 		printf("error: pipe failed\n");
// 		return 1;
// 	}
// 	int id = fork();
// 	if (id == -1)
// 	{
// 		printf("error: fork failed\n");
// 		return 2;
// 	}
// 	if (id == 0)
// 	{
// 		close(fd[0]); //* close the fd because we don't want it to be read nor written from any process
// 		printf("input a number : ");
// 		scanf("%d", &x);
// 		if (write(fd[1], &x, sizeof(int)) == -1)
// 		{
// 			printf("error: write failed\n");
// 			return 3;
// 		}
// 		close(fd[1]);
// 	}
// 	else
// 	{
// 		close(fd[1]);
// 		if (read(fd[0], &y, sizeof(int)) == -1)
// 		{
// 			printf("error: read failed\n");
// 			return 4;
// 		}
 		// y = y + 3; //*you can make change to the value received from the child process
// 		close(fd[0]);
// 		printf("Got from child process %d\n", y);
// 	}
// 	return 0;
	
// }


/*
* Two way communication between processes (using pipes) in C
*/

// int	main(void)
// {
// 	// * 2 pips are 
// 	//! we can't have pipe that receives and sends data on the same process needed for storing the data of read and write
// 	//! that means we need 2 pipes.
//	// ! by doing this, the processes won't interupt each other and the result won't be messy
// 	int p1[2]; // c -> p
// 	int p2[2]; // p -> c

// 	if (pipe(p1) == -1) { return 1; }
// 	if (pipe(p2) == -1) { return 1; }

// 	int	pid = fork();
// 	if (pid == -1) { return 2; }
// 	if (pid == 0)
// 	{
// 		// child process
// 		close(p1[0]); //! we have to close some pipes if they are not used so that we won't have too many of them 
// 		close(p2[1]);
// 		int x;
// 		if (read(p2[0], &x, sizeof(x)) == -1) { return 3; }
// 		printf("Recieved %d\n", x);
// 		x *= 4;
// 		if (write(p1[1], &x, sizeof(x)) == -1) { return 4; }
// 		printf("Wrote %d\n", x);
// 		close(p1[1]);
// 		close(p2[0]);
// 	}
// 	else
// 	{
// 		// parent process
// 		close(p1[1]);
// 		close(p2[0]);
// 		srand(time(NULL));
// 		int y = rand() % 10;
// 		if (write(p2[1], &y, sizeof(y)) == -1) { return 5; }
// 		printf("Wrote %d\n", y);
// 		if (read(p1[0], &y, sizeof(y)) == -1) { return 6; }
// 		printf("result: %d\n", y);
// 		close(p1[0]);
// 		close(p2[1]);
// 		wait(NULL);
// 	}
// }

/*
* How to send an array through pipe
	the example below includes 2 processes
	1. child process should generate random numbers and send them to the parent process
	2. parent process is going to sum the numbers and print the result
*/

// int	main(void)
// {
// 	int	fd[2];

// 	if (pipe(fd) == -1)
// 		return 1;
// 	int	pid = fork();
// 	if (pid == -1)
// 		return 2;
	
// 	if (pid == 0)
// 	{
// 		// child process
// 		close(fd[0]);
// 		int	n, i;
// 		int	arr[10];
// 		srand(time(NULL));
// 		n = rand() % 10 + 1; // n could be anything from 1 to 10
// 		printf("Generated: ");
// 		for (i = 0; i < n; i++)
// 		{
// 			arr[i] = rand() % 11;
// 			printf("%d ", arr[i]);
// 		}
// 		printf("\n");
// 		if (write(fd[1], &n, sizeof(int)) < 0)
// 			return 3;
// 		printf("Sent n: %d\n", n);
// 		if (write(fd[1], arr, sizeof(int) * n) < 0) // sending array with n bytes
// 			return 4;
// 		printf("Sent array\n");
// 		close(fd[1]);
// 	}
// 	else
// 	{
// 		// parent process
// 		close(fd[1]);
// 		int	arr[10];
// 		int	n, i, sum = 0;

// 		if (read(fd[0], &n, sizeof(int)) < 0)
// 			return (5);
// 		printf("received n = %d\n", n);
// 		if (read(fd[0], arr, sizeof(int) *n) < 0)
// 			return (6);
// 		close(fd[0]);
// 		printf("received array\n");
// 		for (i = 0; i < n; i++)
// 			sum += arr[i];
// 		printf("Result: %d\n", sum);
// 		wait(NULL);
// 	}
// 	return (0);
// }

/*
* Sending a string through pipe
*/

// int	main(void)
// {
// 	int	fd[2];
	
// 	if (pipe(fd) == -1)
// 		return (1);
// 	int	pid = fork();
// 	if (pid < 0)
// 		return (2);
// 	if (pid == 0)
// 	{
// 		//child process
// 		close(fd[0]);
// 		char str[200];
// 		printf("Input: ");
// 		fgets(str, 200, stdin);
// 		str[strlen(str) - 1] = '\0';

// 		int	n = strlen(str) + 1;
// 		if (write(fd[1], &n, sizeof(int)) < 0)
// 			return (4);
// 		if (write(fd[1], str, sizeof(char) * n) < 0)
// 			return (3);
// 		close(fd[1]);
// 	}
// 	else
// 	{
// 		//parent process
// 		char str[200];
// 		int	n;

// 		if (read(fd[0], &n, sizeof(int)) < 0)
// 			return (6);
// 		// if (read(fd[0], str, n) < 0) // you can do this or
// 		if (read(fd[0], str, sizeof(char) * n) < 0) //* this is a good practice than just n
// 			return (5);
// 		printf("recieved: %s\n", str);
// 		close(fd[0]);
// 		wait(NULL);
// 	}
// }

/*
* Simulating pipe on linux
*/

// int	main(void)
// {
// 	int	fd[2];
// 	int	pid1;
// 	int	pid2;

// 	if (pipe(fd) < 0)
// 		return (1);
	
// 	pid1 = fork();
// 	if (pid1 < 0)
// 		return (2);
// 	if (pid1 == 0)
// 	{
// 		dup2(fd[1], STDOUT_FILENO);
// 		close(fd[0]);
// 		close(fd[1]);
// 		execlp("ping", "ping", "-c", "5", "google.com", NULL);
// 	}
// 	pid2 = fork();
// 	if (pid2 < 0)
// 		return (3);
// 	if (pid2 == 0)
// 	{
// 		dup2(fd[0], STDIN_FILENO);
// 		close(fd[0]);
// 		close(fd[1]);
// 		execlp("grep", "grep", "round", NULL);
// 	}
// 	// close fd of main 
// 	close(fd[0]);
// 	close(fd[1]);
// 	// since we do 2 fork, we have to wait for the processes separately
// 	waitpid(pid1, NULL, 0);
// 	waitpid(pid2, NULL, 0);
// 	return (0);
	
// }
